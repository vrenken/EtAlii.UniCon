// <auto-generated>
using System.Reflection;

namespace FxResources.System.Collections.Immutable
{
    internal static class SR { }
}
namespace System
{
    internal static partial class SR
    {
        private static global::System.Resources.ResourceManager s_resourceManager;
        internal static global::System.Resources.ResourceManager ResourceManager => s_resourceManager ?? (s_resourceManager = new global::System.Resources.ResourceManager(typeof(FxResources.System.Collections.Immutable.SR)));

        /// <summary>The given key '{0}' was not present in the dictionary.</summary>
        internal static string @Arg_KeyNotFoundWithKey => GetResourceString("Arg_KeyNotFoundWithKey", @"The given key '{0}' was not present in the dictionary.");
        /// <summary>Object is not an array with the same initialization state as the array to compare it to.</summary>
        internal static string @ArrayInitializedStateNotEqual => GetResourceString("ArrayInitializedStateNotEqual", @"Object is not an array with the same initialization state as the array to compare it to.");
        /// <summary>Object is not an array with the same number of elements as the array to compare it to.</summary>
        internal static string @ArrayLengthsNotEqual => GetResourceString("ArrayLengthsNotEqual", @"Object is not an array with the same number of elements as the array to compare it to.");
        /// <summary>Cannot find the old value</summary>
        internal static string @CannotFindOldValue => GetResourceString("CannotFindOldValue", @"Cannot find the old value");
        /// <summary>Capacity was less than the current Count of elements.</summary>
        internal static string @CapacityMustBeGreaterThanOrEqualToCount => GetResourceString("CapacityMustBeGreaterThanOrEqualToCount", @"Capacity was less than the current Count of elements.");
        /// <summary>MoveToImmutable can only be performed when Count equals Capacity.</summary>
        internal static string @CapacityMustEqualCountOnMove => GetResourceString("CapacityMustEqualCountOnMove", @"MoveToImmutable can only be performed when Count equals Capacity.");
        /// <summary>Collection was modified; enumeration operation may not execute.</summary>
        internal static string @CollectionModifiedDuringEnumeration => GetResourceString("CollectionModifiedDuringEnumeration", @"Collection was modified; enumeration operation may not execute.");
        /// <summary>An element with the same key but a different value already exists. Key: '{0}'</summary>
        internal static string @DuplicateKey => GetResourceString("DuplicateKey", @"An element with the same key but a different value already exists. Key: '{0}'");
        /// <summary>This operation does not apply to an empty instance.</summary>
        internal static string @InvalidEmptyOperation => GetResourceString("InvalidEmptyOperation", @"This operation does not apply to an empty instance.");
        /// <summary>This operation cannot be performed on a default instance of ImmutableArray&lt;T&gt;.  Consider initializing the array, or checking the ImmutableArray&lt;T&gt;.IsDefault property.</summary>
        internal static string @InvalidOperationOnDefaultArray => GetResourceString("InvalidOperationOnDefaultArray", @"This operation cannot be performed on a default instance of ImmutableArray<T>.  Consider initializing the array, or checking the ImmutableArray<T>.IsDefault property.");

    }
}
